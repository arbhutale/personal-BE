name: Build Image, push to Registry and Deploy to Digital Ocean's PRD

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
permissions: write-all
jobs:

  build-django:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - run: |
         echo SMTP_HOST_PASSWORD=${{ secrets.SMTP_HOST_PASSWORD }} >> .env
         echo SMTP_HOST_USER=${{ secrets.SMTP_HOST_USER }} >> .env
         echo DB_USER=${{ secrets.DB_USER }} >> .env
         echo DB_PORT=${{ secrets.DB_PORT }} >> .env
         echo DB_NAME=${{ secrets.DB_NAME }} >> .env
         echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
         echo DB_HOST=${{ secrets.DB_HOST }} >> .env
         echo cat .env
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # - name: Run Tests
      #   env:
      #     TEST: 1
      #   run: |
      #     python manage.py test

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push-image-to-registry:
    # Ensure test job passes before pushing image.
    needs: build-django
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --build-arg AUTH_TOKEN=${{ secrets.AUTH_KEY }} --build-arg GTAG_ID=${{ secrets.GTAG_ID }} --build-arg ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} --file Dockerfile --tag ${{ secrets.IMAGE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/${{ secrets.IMAGE_NAME }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag ${{ secrets.IMAGE_NAME }} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          

  deploy:
    needs: push-image-to-registry
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@master
      - name: copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          port: 2077
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "image"

      - name: execute docker-compose
        uses: appleboy/ssh-action@master
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CDN_NAME: ${{ secrets.CDN_NAME }}
          CDN_API_KEY: ${{ secrets.CDN_API_KEY }}
          CDN_API_SECRET: ${{ secrets.CDN_API_SECRET }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
        with:
          host: ${{ secrets.HOST }}
          port: 2077
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker login -u arbhutale -p ${{ secrets.DEPLOY_TOKEN }} docker.pkg.github.com
            cd image
            docker-compose pull
            MODE=production SMTP_HOST_USER=${{ secrets.SMTP_HOST_USER }} SMTP_HOST_PASSWORD=${{ secrets.SMTP_HOST_PASSWORD }} SECRET_KEY=${{ secrets.SECRET_KEY }} CDN_NAME=${{ secrets.CDN_NAME }} CDN_API_KEY=${{ secrets.CDN_API_KEY }} CDN_API_SECRET=${{ secrets.CDN_API_SECRET }} DB_HOST=${{ secrets.DB_HOST }} DB_NAME=${{ secrets.DB_NAME }} DB_USER=${{ secrets.DB_USER }} DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_PORT=${{ secrets.DB_PORT }} docker-compose up -d
            docker image prune -f
